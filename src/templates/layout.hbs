<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>{{title}}</title>
    {{{metaTags}}}
    <script src="https://cdn.jsdelivr.net/npm/fuse.js@7.1.0"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/html2pdf.js/0.10.1/html2pdf.bundle.min.js"
        integrity="sha512-GsLlZN/3F2ErC5ifS5QtgpiJtWd43JWSuIgh7mbzZ8zBps+dvLusV+eNQATqgA/HdeKFVgA5v3S/cIrLF7QnIg=="
        crossorigin="anonymous" referrerpolicy="no-referrer"></script>
    <link rel="stylesheet" type="text/css"
        href="https://cdn.jsdelivr.net/npm/@phosphor-icons/web@2.1.1/src/regular/style.css" />
    <link rel="stylesheet" type="text/css"
        href="https://cdn.jsdelivr.net/npm/@phosphor-icons/web@2.1.1/src/fill/style.css" />
</head>

<body>
    <div class="container">
        <div class="sidebar">
            <div class="sidebar-inner">
                <h1 class="owner"><a href="/">{{owner}}</a></h1>
                <div class="sidebar-theme-toggle">
                    <button class="theme-toggle" onclick="toggleTheme(true)" aria-label="Toggle Theme">
                        <i class="ph ph-sun"></i>
                    </button>
                    <button class="search-button" onclick="openSearch()" aria-label="Open Search">
                        <i class="ph ph-magnifying-glass"></i>
                    </button>
                    <button class="pdf-button" onclick="printPage()" aria-label="Print Page">
                        <i class="ph ph-file-pdf"></i>
                    </button>
                </div>
                <div id="file-tree" class="file-tree"></div>
                <div class="divider" draggable="true"></div>
            </div>
        </div>
        <div class="content" role="main">
            <nav class="top-navbar">
                <div class="top-navbar-left">
                    <button class="sidebar-toggle" onclick="toggleNav()" aria-label="Toggle Sidebar">
                        <i class="ph ph-list"></i>
                    </button>
                    <img class="profile-picture" src="/static/{{profilePicturePath}}" alt="pfp" />
                    <a href="/">{{owner}}</a>
                </div>
                <div class="top-navbar-right">
                    <button class="search-button" onclick="openSearch()" aria-label="Open Search">
                        <i class="ph ph-magnifying-glass"></i>
                    </button>
                    <button class="theme-toggle" onclick="toggleTheme(true)" aria-label="Toggle Theme">
                        <i class="ph ph-sun"></i>
                    </button>
                    <button class="pdf-button" onclick="printPage()" aria-label="Print Page">
                        <i class="ph ph-file-pdf"></i>
                    </button>
                </div>
            </nav>
            <div class="content-container">
                <div class="content-container-inner">
                    {{{content}}}
                </div>
            </div>
            <div class="container-right">
                <h3 class="table-of-content">Table of Contents</h3>
                <div class="container-right-inner">
                    {{{tableOfContents}}}
                </div>
            </div>
        </div>
    </div>

    <div class="keybinding">
        <ul></ul>
    </div>

    <div class="search-dialog" id="search-dialog">
        <div class="search-dialog-content">
            <input type="text" id="search-input" placeholder="search..." autocomplete="off" />
            <button class="close-search" onclick="closeSearch()" aria-label="Close Search"><i
                    class="ph ph-x"></i></button>
            <div id="search-results" class="search-results"></div>
        </div>
    </div>
    <script>
        // Global variables for search functionality
        let searchIndex = [];
        let fuse = null;
        let searchInitialized = false;
        let searchInitializing = false;
        let selectedResultIndex = -1;
        let lastQuery = '';

        document.addEventListener('DOMContentLoaded', async function () {
            try {
                const fileTreeData = JSON.parse('{{{fileTree}}}')
                initializeFileTree(fileTreeData)
            } catch (error) {
                console.error('Error parsing file tree:', error);
            }
            toggleTheme();
            initializeCopyButton();
            toggleKeyHints()
            keybindingInitialize();

            // Initialize search immediately on page load
            initializeSearch();

            const searchInput = document.getElementById('search-input');
            searchInput.addEventListener('input', handleSearch);
            searchInput.addEventListener('keydown', function (e) {
                if (e.key === 'Escape') {
                    closeSearch();
                }
            });
        })
document.getElementById('search-input').addEventListener('keydown', function (e) {
    const results = document.querySelectorAll('.result-item');
    if (!results.length) return;

    switch (e.key) {
        case 'ArrowDown':
            e.preventDefault();
            updateSelectedResult(selectedResultIndex + 1, results.length);
            break;
        case 'ArrowUp':
            e.preventDefault();
            updateSelectedResult(selectedResultIndex - 1, results.length);
            break;
        case 'Enter':
            e.preventDefault();
            if (selectedResultIndex >= 0) {
                results[selectedResultIndex].querySelector('a').click();
            }
            break;
        case 'Escape':
            e.preventDefault();
            closeSearch();
            break;
    }
});

// Close search on outside click
document.getElementById('search-dialog').addEventListener('click', function (e) {
    if (e.target === this) {
        closeSearch();
    }
});

        function keybindingInitialize() {
            const keybindingList = document.querySelector('.keybinding ul');
            if (!keybindingList) return;
            keybindingList.innerHTML = '';

            const shortcuts = [
                {key: 'j', desc: 'Scroll down'},
                {key: 'k', desc: 'Scroll up'},
                {key: 'gg/Home', desc: 'Scroll to top'},
                {key: 'Shift+G/End', desc: 'Scroll to bottom'},
                {key: 'Ctrl+D', desc: 'Scroll half screen down'},
                {key: 'Ctrl+U', desc: 'Scroll half screen up'},
                {key: 'Shift+T', desc: 'Toggle theme'},
                {key: '/', desc: 'Open search'},
                {key: 'Esc', desc: 'Clear focus/close help'},
                {key: 'Shift+H', desc: 'Toggle this help'}
            ];

            shortcuts.forEach(shortcut => {
                const li = document.createElement('li');
                li.textContent = `${shortcut.key} - ${shortcut.desc}`;
                keybindingList.appendChild(li);
            });

            const keybinding = document.querySelector('.keybinding');
            keybinding.classList.add('hidden');
            const title = document.createElement('h4');
            title.textContent = 'Keyboard Shortcuts';
            keybindingList.parentNode.insertBefore(title, keybindingList);
        }

        function printPage() {
            const el = document.querySelector('.content-container')
            html2pdf(el)
        }

        function debounce(func, wait) {
            let timeout;
            return function (...args) {
                clearTimeout(timeout);
                timeout = setTimeout(() => func.apply(this, args), wait);
            };
        }

        function initializeFileTree(fileTreeData) {
            const fileTreeElement = document.getElementById('file-tree');
            if (!fileTreeElement) return;

            const expandedStateKey = 'fileTreeExpandedState';
            const expandedState = new Map(JSON.parse(localStorage.getItem(expandedStateKey)) || []);

            function saveExpandedState() {
                localStorage.setItem(expandedStateKey, JSON.stringify([...expandedState]));
            }

            function renderFileTreeNode(node, path = '') {
                const list = document.createElement('ul');
                const item = document.createElement('li');
                item.classList.add(node.type);
                list.appendChild(item);

                const currentPath = path ? `${path}/${node.name}` : node.name;

                if (node.type === 'directory' && node.children.length > 0) {
                    const directoryWrapper = document.createElement('div');
                    directoryWrapper.classList.add('directory-wrapper');
                    directoryWrapper.style.display = 'flex';
                    directoryWrapper.style.alignItems = 'center';

                    const arrow = document.createElement('i');
                    arrow.setAttribute('class', 'ph ph-caret-right directory-arrow');
                    directoryWrapper.appendChild(arrow);

                    const directoryName = document.createElement('span');
                    directoryName.setAttribute('class', 'dirname');
                    directoryName.textContent = node.name.replaceAll("_", " ").replaceAll("-", " ").replace(".md", "")
                    directoryWrapper.appendChild(directoryName);

                    item.appendChild(directoryWrapper);

                    const childList = document.createElement('ul');
                    const isExpanded = expandedState.get(currentPath) || false;

                    if (isExpanded) {
                        item.classList.add('open');
                    } else {
                        childList.classList.add('collapsed');
                    }

                    node.children.forEach(child => {
                        const childNode = renderFileTreeNode(child, currentPath);
                        childList.appendChild(childNode);
                    });

                    directoryWrapper.addEventListener('click', function (e) {
                        e.stopPropagation();
                        const parentLi = this.parentNode;
                        const isOpen = parentLi.classList.toggle('open');
                        const childrenUl = parentLi.querySelector('ul');
                        childrenUl.classList.toggle('collapsed');
                        expandedState.set(currentPath, isOpen);
                        saveExpandedState();
                    });

                    item.appendChild(childList);
                } else if (node.type === 'file') {
                    item.textContent = node.name.replace(".md", "");
                    item.addEventListener('click', function (e) {
                        e.stopPropagation();
                        const path = node.path.replace(/\.md$/, '.html');
                        window.location.href = '/' + path;
                    });
                }

                return item;
            }

            const rootList = document.createElement('ul');
            fileTreeData.forEach(node => {
                rootList.appendChild(renderFileTreeNode(node));
            });

            fileTreeElement.appendChild(rootList);
        }

        function toggleNav() {
            const sidebar = document.querySelector('.sidebar');
            sidebar.classList.toggle('open');
        }

        function openSearch() {
            if (!searchInitialized && !searchInitializing) {
                initializeSearch();
            }

            const searchDialog = document.querySelector('.search-dialog');
            searchDialog.classList.add('open');

            setTimeout(() => {
                const searchInput = document.getElementById('search-input');
                searchInput.focus();
            }, 100);
        }

        function closeSearch() {
            const searchDialog = document.getElementById('search-dialog');
            searchDialog.classList.remove('open');
            const searchInput = document.getElementById('search-input');
            searchInput.value = '';
            lastQuery = '';
            selectedResultIndex = -1;
            const searchResults = document.getElementById('search-results');
            searchResults.innerHTML = '';
        }

        function toggleTheme(toggle = false) {
            let theme = localStorage.getItem('theme');

            if (!theme) {
                theme = 'dark';
                localStorage.setItem('theme', 'dark');
            }

            if (toggle) {
                theme = theme === 'dark' ? 'light' : 'dark';
                localStorage.setItem('theme', theme);
            }

            const body = document.body;

            if (theme === 'dark') {
                body.classList.remove('light');
                body.classList.add('dark');
            } else if (theme === 'light') {
                body.classList.remove('dark');
                body.classList.add('light');
            }
        }

        function initializeCopyButton() {
            const codeBlocks = document.querySelectorAll('.content-container-inner pre');
            codeBlocks.forEach(block => {
                const button = document.createElement('button');
                button.textContent = 'Copy';
                button.classList.add('copy-button');

                button.addEventListener('click', () => {
                    const code = block.querySelector('code')?.textContent || block.textContent;
                    navigator.clipboard.writeText(code).then(() => {
                        button.textContent = 'Copied!';
                        setTimeout(() => {
                            button.textContent = 'Copy';
                        }, 2000);
                    }).catch(err => {
                        console.error('Failed to copy:', err);
                        button.textContent = 'Error!';
                        setTimeout(() => {
                            button.textContent = 'Copy';
                        }, 2000);
                    });
                });
                block.appendChild(button);
            });
        }

        document.addEventListener('keydown', function (e) {
            if (e.target.tagName === 'INPUT' || e.target.tagName === 'TEXTAREA' || e.target.isContentEditable) {
                return;
            }

            const key = e.key.toLowerCase();
            const scrollAmt = 50;

            if (!window.lastGPress) {
                window.lastGPress = {count: 0, time: 0};
            }

            switch (key) {
                case 'j':
                    e.preventDefault();
                    window.scrollBy(0, scrollAmt);
                    break;
                case 'k':
                    e.preventDefault();
                    window.scrollBy(0, -scrollAmt);
                    break;
                case 'g':
                    if (e.shiftKey) {
                        e.preventDefault();
                        window.scrollTo(0, document.body.scrollHeight);
                    } else {
                        const now = Date.now();
                        if (now - window.lastGPress.time < 500 && window.lastGPress.count === 1) {
                            e.preventDefault();
                            window.scrollTo(0, 0);
                            window.lastGPress.count = 0;
                        } else {
                            window.lastGPress.count = 1;
                            window.lastGPress.time = now;
                        }
                    }
                    break;
                case 'u':
                    if (e.ctrlKey) {
                        e.preventDefault();
                        window.scrollBy(0, -window.innerHeight / 2);
                    }
                    break;
                case 'd':
                    if (e.ctrlKey) {
                        e.preventDefault();
                        window.scrollBy(0, window.innerHeight / 2);
                    }
                    break;
                case 'r':
                    if (e.ctrlKey) {
                        e.preventDefault();
                        window.location.reload();
                    }
                    break;
                case '/':
                    e.preventDefault();
                    openSearch();
                    break;
                case 'escape':
                    if (document.activeElement) document.activeElement.blur();
                    const keybinding = document.querySelector('.keybinding');
                    if (keybinding && !keybinding.classList.contains('hidden')) {
                        keybinding.classList.add('hidden');
                    }
                    closeSearch();
                    break;
                case 'home':
                    e.preventDefault();
                    window.scrollTo(0, 0);
                    break;
                case 'end':
                    e.preventDefault();
                    window.scrollTo(0, document.body.scrollHeight);
                    break;
                case 'h':
                    if (e.shiftKey) {
                        e.preventDefault();
                        toggleKeyHints();
                    }
                    break;
                case 't':
                    if (e.shiftKey) {
                        e.preventDefault();
                        toggleTheme(true);
                    }
                    break;
            }
        });

        function toggleKeyHints() {
            const keybinding = document.querySelector('.keybinding');
            if (keybinding) {
                keybinding.classList.toggle('hidden');
            }
        }

        function extractNameFromUrl(url) {
            if (!url) return 'Untitled';

            // Extract the last part of the URL path
            const parts = url.split('/').filter(Boolean);
            const lastPart = parts[parts.length - 1] || '';

            // Remove file extension and replace dashes/underscores with spaces
            return lastPart
                .replace(/\.html$|\.md$/, '')
                .replace(/[-_]/g, ' ')
                .replace(/\b\w/g, char => char.toUpperCase()); // Capitalize first letter of each word
        }


        // Close search when clicking outside the search content
        document.getElementById('search-dialog').addEventListener('click', function (e) {
            if (e.target === this) {
                closeSearch();
            }
        });

        function updateSelectedResult(newIndex, resultsLength) {
            const items = document.querySelectorAll('.result-item');
            if (items.length === 0) return;

            selectedResultIndex = Math.max(0, Math.min(newIndex, resultsLength - 1));
            items.forEach((item, index) => {
                item.classList.toggle('selected', index === selectedResultIndex);
                if (index === selectedResultIndex) {
                    item.scrollIntoView({ block: 'nearest', behavior: 'smooth' });
                }
            });
        }

        const debouncedHandleSearch = debounce(function (e) {
            const query = e.target.value.trim();
            const searchResults = document.getElementById('search-results');

            if (query === lastQuery) return;
            lastQuery = query;

            if (!query) {
                searchResults.innerHTML = '<p class="search-ready">Type to start searching...</p>';
                return;
            }

            if (!searchInitialized) {
                searchResults.innerHTML = '<p class="search-loading">Search is initializing...</p>';
                if (!searchInitializing) {
                    initializeSearch().then(() => query && handleSearch(e));
                }
                return;
            }

            if (!fuse || !searchIndex.length) {
                searchResults.innerHTML = '<p class="search-error">Search unavailable. Retrying...</p>';
                initializeSearch().then(() => query && handleSearch(e));
                return;
            }

            const results = fuse.search(query);
            displaySearchResults(results, query, searchResults);
        }, 300);

        function displaySearchResults(results, query, searchResultsElement) {
            searchResultsElement.innerHTML = '';
            selectedResultIndex = -1;

            if (!results.length) {
                searchResultsElement.innerHTML = '<p class="no-results">No results found.</p>';
                return;
            }

            const maxResults = Math.min(results.length, 10);
            results.slice(0, maxResults).forEach((result, index) => {
                const item = result.item;
                const matches = result.matches || [];

                const resultItem = document.createElement('div');
                resultItem.className = 'result-item';
                resultItem.dataset.index = index;

                const link = document.createElement('a');
                link.href = item.url;
                link.className = 'result-link';
                link.addEventListener('click', closeSearch);

                const title = document.createElement('div');
                title.className = 'result-title';
                const displayName = item.name || extractNameFromUrl(item.url);
                title.innerHTML = highlightMatch(displayName, matches.filter(m => m.key === 'name'));

                const snippet = document.createElement('div');
                snippet.className = 'result-snippet';
                snippet.innerHTML = item.content
                    ? generateSnippet(item.content, query)
                    : 'No preview available';

                link.appendChild(title);
                link.appendChild(snippet);
                resultItem.appendChild(link);
                searchResultsElement.appendChild(resultItem);
            });

            if (results.length > maxResults) {
                const showMore = document.createElement('p');
                showMore.className = 'search-show-more';
                showMore.textContent = `Showing ${maxResults} of ${results.length} results.`;
                searchResultsElement.appendChild(showMore);
            }
        }

function handleSearch(e) {
    debouncedHandleSearch(e);
}
        async function initializeSearch() {
            if (searchInitializing) return;
            searchInitializing = true;

            const searchResults = document.getElementById('search-results');
            try {
                console.log('Initializing search...');
                if (searchResults) {
                    searchResults.innerHTML = '<p class="search-loading">Loading search index...</p>';
                }

                const response = await fetch('/static/search-index.json');
                if (!response.ok) {
                    throw new Error(`Failed to fetch search index: ${response.status}`);
                }

                const data = await response.json();
                if (!Array.isArray(data)) {
                    throw new Error('Invalid search index format');
                }

                searchIndex = data;
                fuse = new Fuse(searchIndex, {
                    keys: [
                        {name: 'name', weight: 0.5},
                        {name: 'content', weight: 0.3},
                        {name: 'tags', weight: 0.2} // Assuming tags might exist
                    ],
                    threshold: 0.3,
                    distance: 200,
                    includeScore: true,
                    includeMatches: true,
                    useExtendedSearch: true,
                    ignoreLocation: false,
                    minMatchCharLength: 2,
                    shouldSort: true
                });

                console.log('Search initialized with', searchIndex.length, 'items');
                searchInitialized = true;

                if (searchResults && document.querySelector('.search-dialog').classList.contains('open')) {
                    searchResults.innerHTML = '<p class="search-ready">Type to start searching...</p>';
                    const searchInput = document.getElementById('search-input');
                    if (searchInput?.value.trim()) {
                        handleSearch({target: searchInput});
                    }
                }
            } catch (error) {
                console.error('Search init failed:', error);
                searchInitialized = false;
                if (searchResults) {
                    searchResults.innerHTML = `
                <p class="search-error">Failed to load search: ${error.message}</p>
                <button class="retry-button" onclick="initializeSearch()">Retry</button>`;
                }
            } finally {
                searchInitializing = false;
            }
        }
        function highlightMatch(text, matches) {
            if (!matches || !matches.length) return text;
            let result = text;
            matches.forEach(match => {
                const start = match.indices[0][0];
                const end = match.indices[0][1] + 1;
                const matchedText = text.slice(start, end);
                result = result.replace(matchedText, `<mark>${matchedText}</mark>`);
            });
            return result;
        }

        function generateSnippet(content, query, maxLength = 100) {
            const lowerContent = content.toLowerCase();
            const lowerQuery = query.toLowerCase();
            const index = lowerContent.indexOf(lowerQuery);
            let start = Math.max(0, index - 50);
            let snippet = content.slice(start, start + maxLength);
            if (start > 0) snippet = '...' + snippet;
            if (snippet.length < content.length) snippet += '...';
            return highlightMatch(snippet, [{ indices: [[index - start, index - start + query.length - 1]] }]);
        }
    </script>
</body>

</html>
